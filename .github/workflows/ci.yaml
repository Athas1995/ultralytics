# YOLO ðŸš€ by Ultralytics, GPL-3.0 license
# YOLO Continuous Integration (CI) GitHub Actions tests

name: Ultralytics CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # schedule:
  #   - cron: '0 0 * * *'  # runs at 00:00 UTC every day

jobs:
  Tests:
    timeout-minutes: 60
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.10' ]
        model: [ yolov5n ]
        torch: [ latest ]
#        include:
#          - os: ubuntu-latest
#            python-version: '3.7'  # '3.6.8' min
#            model: yolov5n
#          - os: ubuntu-latest
#            python-version: '3.8'
#            model: yolov5n
#          - os: ubuntu-latest
#            python-version: '3.9'
#            model: yolov5n
#          - os: ubuntu-latest
#            python-version: '3.8'  # torch 1.7.0 requires python >=3.6, <=3.8
#            model: yolov5n
#            torch: '1.7.0'  # min torch version CI https://pypi.org/project/torchvision/
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get cache dir
        # https://github.com/actions/cache/blob/master/examples.md#multiple-oss-in-a-workflow
        id: pip-cache
        run: echo "::set-output name=dir::$(pip cache dir)"
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-${{ matrix.python-version }}-pip-
      - name: Install requirements
        run: |
          python -m pip install --upgrade pip wheel
          if [ "${{ matrix.torch }}" == "1.7.0" ]; then
              pip install -r requirements.txt torch==1.7.0 torchvision==0.8.1 --extra-index-url https://download.pytorch.org/whl/cpu
          else
              pip install -r requirements.txt --extra-index-url https://download.pytorch.org/whl/cpu
          fi
          # pip install ultralytics (production)
          pip install .
        shell: bash  # for Windows compatibility
      - name: Check environment
        run: |
          # python -c "import utils; utils.notebook_init()"
          echo "RUNNER_OS is ${{ runner.os }}"
          echo "GITHUB_EVENT_NAME is ${{ github.event_name }}"
          echo "GITHUB_WORKFLOW is ${{ github.workflow }}"
          echo "GITHUB_ACTOR is ${{ github.actor }}"
          echo "GITHUB_REPOSITORY is ${{ github.repository }}"
          echo "GITHUB_REPOSITORY_OWNER is ${{ github.repository_owner }}"
          python --version
          pip --version
          pip list
      - name: Test pip package
        shell: python
        env:
          APIKEY: ${{ secrets.ULTRALYTICS_HUB_APIKEY }}
        run: |
          import os
          import ultralytics
          from ultralytics import hub, yolo
          key = os.environ['APIKEY']
          print(ultralytics.__version__)
          # ultralytics.checks()
          # ultralytics.reset_model(key)  # reset trained model
          # ultralytics.start(key)  # train model
      - name: Test detection
        shell: bash  # for Windows compatibility
        run: |
          yolo task=detect mode=train model=yolov5n.yaml data=coco128.yaml epochs=1 imgsz=64
          yolo task=detect mode=val model=runs/exp/weights/last.pt imgsz=64
      - name: Test segmentation
        shell: bash  # for Windows compatibility
        # TODO: redo val test without hardcoded weights
        run: |
          yolo task=segment mode=train model=yolov5n-seg.yaml data=coco128-seg.yaml epochs=1 imgsz=64
          yolo task=segment mode=val model=runs/exp2/weights/last.pt data=coco128-seg.yaml imgsz=64
      - name: Test classification
        shell: bash  # for Windows compatibility
        run: |
          yolo task=classify mode=train model=resnet18 data=mnist160 epochs=1 imgsz=32
          yolo task=classify mode=val model=runs/exp3/weights/last.pt data=mnist160
